#!/usr/bin/env node
var cluster      = require('cluster');
if(cluster.isMaster){
    var numCPUs = require('os').cpus().length;
    if(!process.env.PRODUCTION){
        numCPUs = 1;
    }
    for (var i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    cluster.on('exit', function() {
        console.log('A worker process died, restarting...');
        cluster.fork();
    });
}else{
    /**
     * Module dependencies.
     */
    var fs           = require('fs');
    var path         = require('path');
    var app          = require(path.normalize(__dirname + '/app'));
    var assets       = require(path.normalize(__dirname + '/../helpers/assets'));
    var debug        = require('debug')('redispubsub');
    var http         = require('http');
    var https        = require('https');
    var socketiosess = require('socket.io-express-session');

    /**
     * Get port from environment and store in Express.
     */
    var port = normalizePort(process.env.PORT || 3001);
    app.set('port', port);
    console.log("Port is " + port);

    /**
     * Create HTTP server.
     */

    var server;
    if(process.env.PRODUCTION ||Â !assets.SHOULD_USE_SLL){
        server = http.createServer(app);
    }else{
        var privateKey = fs.readFileSync(path.normalize(__dirname + '/../privatekey.pem'));
        var certificate = fs.readFileSync(path.normalize(__dirname + '/../certificate.pem'));
        server = https.createServer({
            key: privateKey,
            cert: certificate
        }, app);
    }

    /*
    * setup socket.io, and socket-session
    */
    var socketIO = require('socket.io');
    var io = socketIO(server, {
        serveClient: false
    });
    io.use(socketiosess(app.sessionInstance));
    io.set("transports", ['polling', 'websocket']);

    // Gives the socket to the events of the backend/routes
    var setEvents = require(path.normalize('../routes/socket-io'))(io);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
      var port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }

    /* Catch all errors */
    process.on('uncaughtException', function(err) {
        // handle the error safely
        console.log(err);
    });
}
